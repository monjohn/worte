# Elixir CircleCI 2.0 configuration file
#
defaults: &defaults
  parallelism: 1 # run only one instance of this job in parallel

  working_directory:
    ~/app # directory where steps will run

    # database image
  # - image: circleci/postgres:10.1-alpine
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_DB: app_test
  #     POSTGRES_PASSWORD:

version: 2
jobs:
  test:
    <<: *defaults
    docker:
      - image: circleci/elixir
        environment:
          MIX_ENV: test
    steps:
      - checkout

      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache:
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: mix do deps.get, compile
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "deps"
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}
          paths:
            - "deps"
      - save_cache:
          key: v1-mix-cache
          paths:
            - "deps"
      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths:
            - "deps"
      - save_cache:
          key: v1-build-cache
          paths:
            - "_build"

      # - run:
      #     name: Wait for DB
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m
      # - run: mix test
      # - store_test_results:
      #     path: _build/test/lib/worte

  deploy:
    <<: *defaults

    docker:
      - image: circleci/elixir-node
        environment: # environment variables for primary container
          MIX_ENV: prod
          DATABASE_URL: ecto://USER:PASS@HOST/DATABASE
    steps:
      - checkout # check out source code to working directory
      - run: mix local.hex --force # install Hex locally (without prompt)
      - run: mix local.rebar --force # fetch a copy of rebar (without prompt)

      # - run: docker cp mix.exs  ./
      # - run: docker cp mix.lock ./
      # - run: docker cp config config
      - run: mix deps.get
      - run: mix deps.compile # get updated dependencies & compile them

      # build assets
      # - run: docker cp assets assets
      - run: cd assets && npm install && npm run deploy
      - run: mix phx.digest

      # build project
      # - run: docker cp priv priv
      # - run: docker cp lib lib
      - run: mix compile

      # build release
      # - run: docker cp rel rel
      - run: mix release

      - run:
          name: Deploy if tests pass and branch is develop
          command: bash scripts/deploy.sh

workflows:
  version: 2
  build-test-and-deploy-staging:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master
